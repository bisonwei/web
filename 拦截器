1.xml文件配置
<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/app/*/*.do" />
			<mvc:mapping path="/app/*.html" />
			<mvc:mapping path="/app/*/*.js" />
			<bean class="com.palic.elis.dscs.web.interceptor.AdminInterceptor" />
		</mvc:interceptor>
</mvc:interceptors>
2.拦截器的具体实现
package com.palic.elis.dscs.web.interceptor;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.palic.elis.dscs.web.util.WebUtils;

@Component
public class AdminInterceptor extends HandlerInterceptorAdapter {
	private static final Logger log = LoggerFactory.getLogger(AdminInterceptor.class);

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)throws Exception {
		log.info("AdminInterceptor.preHandle:");
		if (hasLogin(request)) {
			return true;
		} else {
			response.sendRedirect("http://" + WebUtils.getRemoteAddr(request) + ":" + WebUtils.getLocalPort(request)+ "/elisdscsweb/");
			return false;
		}

	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		log.info("AdminInterceptor.afterCompletion:");
	}

	private boolean hasLogin(HttpServletRequest request) {
		HttpSession session = request.getSession();
		String RequestUri = request.getRequestURI();
		String dscsLoginUserId = (String) session.getAttribute("dscsLoginUserId");
		if (null != dscsLoginUserId) {
			log.info("RequestUri===" + RequestUri);
			String cururlExpWeb = "";
			if (!StringUtils.isBlank(RequestUri)) {
				cururlExpWeb = RequestUri.replaceAll("/elisdscsweb/", "");
			}
			if (RequestUri.equals("/elisdscsweb/app/admin/getUserFunctionTree.do")
					|| RequestUri.equals("/elisdscsweb/app/dashboard.html")
					|| RequestUri.startsWith("/elisdscsweb/app/js/")
					|| RequestUri.startsWith("/elisdscsweb/app/css/")
					|| RequestUri.endsWith(".do")) {
				return true;
			} else {
				Object dscsAllFuncList = session.getAttribute("dscsAllFuncList");
				if (null == dscsAllFuncList) {
					return false;
				}
				JSONArray functions = (JSONArray) JSONArray.parse(dscsAllFuncList.toString());
				if (!functions.isEmpty()) {
					for (int i = 0; i < functions.size(); i++) {
						JSONObject function = functions.getJSONObject(i);
						if (!StringUtils.isBlank(function.getString("param"))
								&& !"1".equals(function.getString("state"))) {
							String pageurl = function.getString("param");
							// 当前请求的路径和路径树中的路径进行比较,且匹配到
							if (!"".equals(cururlExpWeb) && -1 != cururlExpWeb.indexOf(pageurl)) {
								if (pageurl.equals(cururlExpWeb)) {
									return true;
								} else {
									continue;
								}
							} else {
								continue;
							}
						}
					}
				}
			}
		} else {
			return false;
		}
		log.info("user {} --> {}", dscsLoginUserId, RequestUri);
		return false;
	}
}
